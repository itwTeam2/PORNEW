//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POR.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbContext : DbContext
    {
        public dbContext()
            : base("name=dbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Allowance> Allowances { get; set; }
        public virtual DbSet<AllowanceCategory> AllowanceCategories { get; set; }
        public virtual DbSet<AllowanceItemCode> AllowanceItemCodes { get; set; }
        public virtual DbSet<AllowancePaymentType> AllowancePaymentTypes { get; set; }
        public virtual DbSet<AnnualLeavePlan> AnnualLeavePlans { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<CivilStatusCategory> CivilStatusCategories { get; set; }
        public virtual DbSet<CivilStatusDivorceDetail> CivilStatusDivorceDetails { get; set; }
        public virtual DbSet<CivilStatusHeader> CivilStatusHeaders { get; set; }
        public virtual DbSet<CivilStatusMarriedDetail> CivilStatusMarriedDetails { get; set; }
        public virtual DbSet<CivilStatusSpouseDetail> CivilStatusSpouseDetails { get; set; }
        public virtual DbSet<CivilStatusWidowDetail> CivilStatusWidowDetails { get; set; }
        public virtual DbSet<DirectItem> DirectItems { get; set; }
        public virtual DbSet<DutyLocation> DutyLocations { get; set; }
        public virtual DbSet<EDCS_AllowanceValue> EDCS_AllowanceValue { get; set; }
        public virtual DbSet<EDCS_AllowanceValueRank> EDCS_AllowanceValueRank { get; set; }
        public virtual DbSet<EDCS_ProcessedTransactions> EDCS_ProcessedTransactions { get; set; }
        public virtual DbSet<EDCS_ProcessHeader> EDCS_ProcessHeader { get; set; }
        public virtual DbSet<EDCS_ProcessTypes> EDCS_ProcessTypes { get; set; }
        public virtual DbSet<EDProcessUser> EDProcessUsers { get; set; }
        public virtual DbSet<F121FlowStatus> F121FlowStatus { get; set; }
        public virtual DbSet<F252ChargeHeader> F252ChargeHeader { get; set; }
        public virtual DbSet<F252OffenceInfo> F252OffenceInfo { get; set; }
        public virtual DbSet<F252PunishmentDetails> F252PunishmentDetails { get; set; }
        public virtual DbSet<F252PunishmentHeader> F252PunishmentHeader { get; set; }
        public virtual DbSet<F252WitnessHeader> F252WitnessHeader { get; set; }
        public virtual DbSet<F252WittnessPerson> F252WittnessPerson { get; set; }
        public virtual DbSet<FixAllowanceDetailsFlowStatu> FixAllowanceDetailsFlowStatus { get; set; }
        public virtual DbSet<FixedAllowanceCancel> FixedAllowanceCancels { get; set; }
        public virtual DbSet<FixedAllowanceCancelManual> FixedAllowanceCancelManuals { get; set; }
        public virtual DbSet<FixedAllowanceDetail> FixedAllowanceDetails { get; set; }
        public virtual DbSet<FixedAllowanceEligibleList> FixedAllowanceEligibleLists { get; set; }
        public virtual DbSet<FlowManagementStatu> FlowManagementStatus { get; set; }
        public virtual DbSet<FlowStatusCivilStatusDetail> FlowStatusCivilStatusDetails { get; set; }
        public virtual DbSet<FlowStatusGSQDetail> FlowStatusGSQDetails { get; set; }
        public virtual DbSet<FlowStatusLivingInOutDetail> FlowStatusLivingInOutDetails { get; set; }
        public virtual DbSet<FlowStatusNOKChangeDetail> FlowStatusNOKChangeDetails { get; set; }
        public virtual DbSet<FlowStatusPsnContact> FlowStatusPsnContacts { get; set; }
        public virtual DbSet<FlowStatusSecondaryDutyDetail> FlowStatusSecondaryDutyDetails { get; set; }
        public virtual DbSet<GSQHeader> GSQHeaders { get; set; }
        public virtual DbSet<GSQStatu> GSQStatus { get; set; }
        public virtual DbSet<HolidayType> HolidayTypes { get; set; }
        public virtual DbSet<LeaveCategory> LeaveCategories { get; set; }
        public virtual DbSet<LeaveCount> LeaveCounts { get; set; }
        public virtual DbSet<LeaveDetail> LeaveDetails { get; set; }
        public virtual DbSet<LeaveFlowStatu> LeaveFlowStatus { get; set; }
        public virtual DbSet<LeaveHeader> LeaveHeaders { get; set; }
        public virtual DbSet<LeaveProcessHeadar> LeaveProcessHeadars { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<LivingInOutHeader> LivingInOutHeaders { get; set; }
        public virtual DbSet<LivingStatu> LivingStatus { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<MovementCondition> MovementConditions { get; set; }
        public virtual DbSet<MovementStatu> MovementStatus { get; set; }
        public virtual DbSet<MP> MPs { get; set; }
        public virtual DbSet<NOKChangeDetail> NOKChangeDetails { get; set; }
        public virtual DbSet<NOKChangeHeader> NOKChangeHeaders { get; set; }
        public virtual DbSet<NOKStatu> NOKStatus { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PORFlowGroup> PORFlowGroups { get; set; }
        public virtual DbSet<PORMasterCategory> PORMasterCategories { get; set; }
        public virtual DbSet<PORMasterSubCategory> PORMasterSubCategories { get; set; }
        public virtual DbSet<PorModule> PorModules { get; set; }
        public virtual DbSet<ProcessHistory> ProcessHistories { get; set; }
        public virtual DbSet<PsnChildDetail> PsnChildDetails { get; set; }
        public virtual DbSet<PsnContactDetail> PsnContactDetails { get; set; }
        public virtual DbSet<PsnContactHeader> PsnContactHeaders { get; set; }
        public virtual DbSet<PSubCategory> PSubCategories { get; set; }
        public virtual DbSet<PublicHolidayCalender> PublicHolidayCalenders { get; set; }
        public virtual DbSet<RationAllowenceCharge> RationAllowenceCharges { get; set; }
        public virtual DbSet<RecordStatu> RecordStatus { get; set; }
        public virtual DbSet<SecDutyAppointment> SecDutyAppointments { get; set; }
        public virtual DbSet<SecondaryDutyDetail> SecondaryDutyDetails { get; set; }
        public virtual DbSet<SecondaryDutyHeader> SecondaryDutyHeaders { get; set; }
        public virtual DbSet<SecurityQuestion> SecurityQuestions { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<svc> svcs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SystemLog> SystemLogs { get; set; }
        public virtual DbSet<test> tests { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<UserPermission> UserPermissions { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<WitnessDocument> WitnessDocuments { get; set; }
        public virtual DbSet<AllowanceType> AllowanceTypes { get; set; }
        public virtual DbSet<DisturbanceAmount> DisturbanceAmounts { get; set; }
        public virtual DbSet<ItemCodeList> ItemCodeLists { get; set; }
        public virtual DbSet<PorObject> PorObjects { get; set; }
        public virtual DbSet<PorYear> PorYears { get; set; }
        public virtual DbSet<RationValue> RationValues { get; set; }
        public virtual DbSet<SecondaryDutyStatu> SecondaryDutyStatus { get; set; }
        public virtual DbSet<Service_Type> Service_Type { get; set; }
        public virtual DbSet<svc2> svc2 { get; set; }
        public virtual DbSet<F121AllDetails> F121AllDetails { get; set; }
        public virtual DbSet<F1250> F1250 { get; set; }
        public virtual DbSet<TESTMDATA> TESTMDATAs { get; set; }
        public virtual DbSet<TestVw> TestVws { get; set; }
        public virtual DbSet<Vw_AllNOK> Vw_AllNOK { get; set; }
        public virtual DbSet<Vw_CivliStatusReject> Vw_CivliStatusReject { get; set; }
        public virtual DbSet<Vw_CurrentAttachment> Vw_CurrentAttachment { get; set; }
        public virtual DbSet<Vw_CurrentPosting> Vw_CurrentPosting { get; set; }
        public virtual DbSet<Vw_CurrentUserLiving> Vw_CurrentUserLiving { get; set; }
        public virtual DbSet<Vw_CurrentUserRoleMarried> Vw_CurrentUserRoleMarried { get; set; }
        public virtual DbSet<Vw_DirectItem> Vw_DirectItem { get; set; }
        public virtual DbSet<Vw_F121> Vw_F121 { get; set; }
        public virtual DbSet<Vw_FAEligibleList> Vw_FAEligibleList { get; set; }
        public virtual DbSet<Vw_FixedAllowance_FLowStatus> Vw_FixedAllowance_FLowStatus { get; set; }
        public virtual DbSet<Vw_FixedAllowanceDetail> Vw_FixedAllowanceDetail { get; set; }
        public virtual DbSet<Vw_FixedAllowanceDetailReport> Vw_FixedAllowanceDetailReport { get; set; }
        public virtual DbSet<Vw_FlowStatus> Vw_FlowStatus { get; set; }
        public virtual DbSet<Vw_FlowStatusUser_ToolTip> Vw_FlowStatusUser_ToolTip { get; set; }
        public virtual DbSet<Vw_GSQDetails> Vw_GSQDetails { get; set; }
        public virtual DbSet<Vw_Holiday> Vw_Holiday { get; set; }
        public virtual DbSet<Vw_Leave> Vw_Leave { get; set; }
        public virtual DbSet<Vw_LeaveDetail> Vw_LeaveDetail { get; set; }
        public virtual DbSet<Vw_LeaveFlow_FullDetails> Vw_LeaveFlow_FullDetails { get; set; }
        public virtual DbSet<Vw_LeaveFlowToolTip> Vw_LeaveFlowToolTip { get; set; }
        public virtual DbSet<Vw_LeaveP3Details> Vw_LeaveP3Details { get; set; }
        public virtual DbSet<Vw_LeavePlan> Vw_LeavePlan { get; set; }
        public virtual DbSet<Vw_LeaveProcessDetails> Vw_LeaveProcessDetails { get; set; }
        public virtual DbSet<VW_LeaveTest> VW_LeaveTest { get; set; }
        public virtual DbSet<Vw_LivingStatusReject> Vw_LivingStatusReject { get; set; }
        public virtual DbSet<Vw_MQDetails> Vw_MQDetails { get; set; }
        public virtual DbSet<Vw_NOK_Details> Vw_NOK_Details { get; set; }
        public virtual DbSet<Vw_NOKChangeDetails> Vw_NOKChangeDetails { get; set; }
        public virtual DbSet<Vw_NokDetailsP2> Vw_NokDetailsP2 { get; set; }
        public virtual DbSet<Vw_Offences> Vw_Offences { get; set; }
        public virtual DbSet<Vw_OfficerNOK> Vw_OfficerNOK { get; set; }
        public virtual DbSet<Vw_OtherNOK> Vw_OtherNOK { get; set; }
        public virtual DbSet<Vw_P2Marriage> Vw_P2Marriage { get; set; }
        public virtual DbSet<Vw_P2PersonalDetail> Vw_P2PersonalDetail { get; set; }
        public virtual DbSet<Vw_P3PersonalDetail> Vw_P3PersonalDetail { get; set; }
        public virtual DbSet<Vw_PersonalDetail> Vw_PersonalDetail { get; set; }
        public virtual DbSet<Vw_PorReport> Vw_PorReport { get; set; }
        public virtual DbSet<Vw_Punishments> Vw_Punishments { get; set; }
        public virtual DbSet<VW_RANKS> VW_RANKS { get; set; }
        public virtual DbSet<Vw_RejectLeave> Vw_RejectLeave { get; set; }
        public virtual DbSet<Vw_SelectUserRole> Vw_SelectUserRole { get; set; }
        public virtual DbSet<Vw_UpdateQuery> Vw_UpdateQuery { get; set; }
        public virtual DbSet<Vw_UserFlowHistory> Vw_UserFlowHistory { get; set; }
        public virtual DbSet<Vw_UserProfile> Vw_UserProfile { get; set; }
    
        public virtual ObjectResult<CivilFlowStatus_Result> CivilFlowStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CivilFlowStatus_Result>("CivilFlowStatus", snoParameter);
        }
    
        public virtual ObjectResult<EDDivorceDetailsToBeProcess_Result> EDDivorceDetailsToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDDivorceDetailsToBeProcess_Result>("EDDivorceDetailsToBeProcess");
        }
    
        public virtual ObjectResult<EDDutyAllowanceDetailsToBeProcess_Result> EDDutyAllowanceDetailsToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDDutyAllowanceDetailsToBeProcess_Result>("EDDutyAllowanceDetailsToBeProcess");
        }
    
        public virtual ObjectResult<EDLeaveDataToBeProcess_Result> EDLeaveDataToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDLeaveDataToBeProcess_Result>("EDLeaveDataToBeProcess");
        }
    
        public virtual ObjectResult<EDLivingStatusDetailsToBeProcess_Result> EDLivingStatusDetailsToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDLivingStatusDetailsToBeProcess_Result>("EDLivingStatusDetailsToBeProcess");
        }
    
        public virtual ObjectResult<EDMarrigeDetailsToBeProcess_Result> EDMarrigeDetailsToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDMarrigeDetailsToBeProcess_Result>("EDMarrigeDetailsToBeProcess");
        }
    
        public virtual ObjectResult<EDWidowDetailsToBeProcess_Result> EDWidowDetailsToBeProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EDWidowDetailsToBeProcess_Result>("EDWidowDetailsToBeProcess");
        }
    
        public virtual ObjectResult<F121_Result> F121(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<F121_Result>("F121", snoParameter);
        }
    
        public virtual ObjectResult<F121FileReport_Result> F121FileReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<F121FileReport_Result>("F121FileReport");
        }
    
        public virtual ObjectResult<F121SP_Result> F121SP(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string location)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<F121SP_Result>("F121SP", fromDateParameter, toDateParameter, locationParameter);
        }
    
        public virtual ObjectResult<F121SP1_Result> F121SP1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<F121SP1_Result>("F121SP1", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GSQAdvancedSearch_Result> GSQAdvancedSearch(string searchLoc, Nullable<int> gSQStatus, Nullable<int> recordType, string fromDate, string toDate)
        {
            var searchLocParameter = searchLoc != null ?
                new ObjectParameter("SearchLoc", searchLoc) :
                new ObjectParameter("SearchLoc", typeof(string));
    
            var gSQStatusParameter = gSQStatus.HasValue ?
                new ObjectParameter("GSQStatus", gSQStatus) :
                new ObjectParameter("GSQStatus", typeof(int));
    
            var recordTypeParameter = recordType.HasValue ?
                new ObjectParameter("recordType", recordType) :
                new ObjectParameter("recordType", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GSQAdvancedSearch_Result>("GSQAdvancedSearch", searchLocParameter, gSQStatusParameter, recordTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GSQFlowStatus_Result> GSQFlowStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GSQFlowStatus_Result>("GSQFlowStatus", snoParameter);
        }
    
        public virtual ObjectResult<GSQRejectList_Result> GSQRejectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GSQRejectList_Result>("GSQRejectList");
        }
    
        public virtual ObjectResult<LeaveCardReport_Result> LeaveCardReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveCardReport_Result>("LeaveCardReport");
        }
    
        public virtual ObjectResult<Nullable<decimal>> LeaveCardRowTotal(Nullable<int> leaveHeaderId)
        {
            var leaveHeaderIdParameter = leaveHeaderId.HasValue ?
                new ObjectParameter("LeaveHeaderId", leaveHeaderId) :
                new ObjectParameter("LeaveHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LeaveCardRowTotal", leaveHeaderIdParameter);
        }
    
        public virtual ObjectResult<LeaveCivil_Result> LeaveCivil()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveCivil_Result>("LeaveCivil");
        }
    
        public virtual ObjectResult<LeaveFlowStatusSP_Result> LeaveFlowStatusSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveFlowStatusSP_Result>("LeaveFlowStatusSP");
        }
    
        public virtual ObjectResult<LivingInOutStatus_Result> LivingInOutStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LivingInOutStatus_Result>("LivingInOutStatus", snoParameter);
        }
    
        public virtual ObjectResult<NOKFlowStatus_Result> NOKFlowStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NOKFlowStatus_Result>("NOKFlowStatus", snoParameter);
        }
    
        public virtual ObjectResult<NOKRejectList_Result> NOKRejectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NOKRejectList_Result>("NOKRejectList");
        }
    
        public virtual ObjectResult<OICPROCES_Result> OICPROCES(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OICPROCES_Result>("OICPROCES", snoParameter);
        }
    
        public virtual ObjectResult<OICPROCESConfirm_Result> OICPROCESConfirm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OICPROCESConfirm_Result>("OICPROCESConfirm");
        }
    
        public virtual ObjectResult<PersonChildAdvancedSearch_Result> PersonChildAdvancedSearch(string searchLoc, Nullable<int> mSCID, Nullable<int> recordType, string fromDate, string toDate)
        {
            var searchLocParameter = searchLoc != null ?
                new ObjectParameter("SearchLoc", searchLoc) :
                new ObjectParameter("SearchLoc", typeof(string));
    
            var mSCIDParameter = mSCID.HasValue ?
                new ObjectParameter("MSCID", mSCID) :
                new ObjectParameter("MSCID", typeof(int));
    
            var recordTypeParameter = recordType.HasValue ?
                new ObjectParameter("recordType", recordType) :
                new ObjectParameter("recordType", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonChildAdvancedSearch_Result>("PersonChildAdvancedSearch", searchLocParameter, mSCIDParameter, recordTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PersonChildFlowStatus_Result> PersonChildFlowStatus(Nullable<long> sno, Nullable<int> psnConHeaderID)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var psnConHeaderIDParameter = psnConHeaderID.HasValue ?
                new ObjectParameter("PsnConHeaderID", psnConHeaderID) :
                new ObjectParameter("PsnConHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonChildFlowStatus_Result>("PersonChildFlowStatus", snoParameter, psnConHeaderIDParameter);
        }
    
        public virtual ObjectResult<PersonChildRejectList_Result> PersonChildRejectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonChildRejectList_Result>("PersonChildRejectList");
        }
    
        public virtual ObjectResult<PersonConAdvancedSearch_Result> PersonConAdvancedSearch(string searchLoc, Nullable<int> mSCID, Nullable<int> recordType, string fromDate, string toDate)
        {
            var searchLocParameter = searchLoc != null ?
                new ObjectParameter("SearchLoc", searchLoc) :
                new ObjectParameter("SearchLoc", typeof(string));
    
            var mSCIDParameter = mSCID.HasValue ?
                new ObjectParameter("MSCID", mSCID) :
                new ObjectParameter("MSCID", typeof(int));
    
            var recordTypeParameter = recordType.HasValue ?
                new ObjectParameter("recordType", recordType) :
                new ObjectParameter("recordType", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonConAdvancedSearch_Result>("PersonConAdvancedSearch", searchLocParameter, mSCIDParameter, recordTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PersonConRejectList_Result> PersonConRejectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonConRejectList_Result>("PersonConRejectList");
        }
    
        public virtual ObjectResult<PersonContactFlowStatus_Result> PersonContactFlowStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PersonContactFlowStatus_Result>("PersonContactFlowStatus", snoParameter);
        }
    
        public virtual ObjectResult<ProcessDivorceDetails_Result> ProcessDivorceDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessDivorceDetails_Result>("ProcessDivorceDetails");
        }
    
        public virtual ObjectResult<ProcessLivingInOut_Result> ProcessLivingInOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessLivingInOut_Result>("ProcessLivingInOut");
        }
    
        public virtual ObjectResult<ProcessMarrigeDetails_Result> ProcessMarrigeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessMarrigeDetails_Result>("ProcessMarrigeDetails");
        }
    
        public virtual ObjectResult<ProcessWidowDetails_Result> ProcessWidowDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessWidowDetails_Result>("ProcessWidowDetails");
        }
    
        public virtual ObjectResult<SecondaryDutyFlowStatus_Result> SecondaryDutyFlowStatus(Nullable<long> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SecondaryDutyFlowStatus_Result>("SecondaryDutyFlowStatus", snoParameter);
        }
    
        public virtual ObjectResult<SecondaryDutyRejectFlowStatus_Result> SecondaryDutyRejectFlowStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SecondaryDutyRejectFlowStatus_Result>("SecondaryDutyRejectFlowStatus");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
