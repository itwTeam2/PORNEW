@model POR.Models.Nok._NOKChangeHeader

<script src="~/Scripts/Jq.js"></script>
@*<script src="~/Scripts/LivingInOut.js"></script>*@
@{
    ViewBag.Title = "Edit";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content-wrapper">
        <section class="content-header">

            <h1 style="text-align:center"><span>NOK Change</span></h1>

            <div id="ErrorMessage">
                @if (TempData["ScfMsg"] != null)
                {
                    <div id="Msg" class="col-lg-12  alert alert-success">
                        <button type="button" class="close" data-dismiss="alert">×</button>
                        <strong>Alert! </strong> @TempData["ScfMsg"]
                    </div>
                }
                else if (TempData["ErrMsg"] != null)
                {
                    <div id="Msg" class="col-lg-12 alert alert-danger">
                        <button type="button" class="close" data-dismiss="alert">×</button>
                        <strong>Alert! </strong>@TempData["ErrMsg"]
                    </div>
                }
            </div>
        </section>
        <br />
        @{
           int RejectStatus = Convert.ToInt32(TempData["Rejectstatus"]);
                       
            <section class="col-lg-6 connectedSortable">
                <div class="nav-tabs-custom" style="height:695px">
                    @Html.ValidationSummary(true)

                    <div class="box-body">
                        @*Service Number*@
                        <div class="form-group">
                            <div class="col-lg-6">
                                @Html.Label("Service Number", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.ServiceNo, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                                @Html.HiddenFor(model => model.ServiceNo, new { @class = "form-control ", autocomplete = "off" })
                                @Html.HiddenFor(model => model.NOKChangeHeadrerID, new { @class = "form-control ", autocomplete = "off" })                               
                            </div>

                            <div class="col-lg-6">
                                @Html.Label("Rank", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.Rank, new { @class = "form-control ", autocomplete = "off", placeholder = "", @readonly = "readonly" })
                            </div>

                        </div>
                        
                        @*Name*@
                        <div class="form-group">
                            <div class="col-lg-12" style="margin-top:12px">
                                @Html.Label("Name", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.FullName, new { @class = "form-control ", autocomplete = "off", placeholder = "", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.FullName, string.Empty, new { @class = "label label-danger" })

                            </div>
                        </div>

                        @*Branch/Trade/Authority*@
                        <div class="form-group">
                            <div class="col-lg-12" style="margin-top:12px">
                                @Html.Label("Authority", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.Authority, new { @class = "form-control ", autocomplete = "off", placeholder = "" })
                                @*@Html.ValidationMessageFor(model => model.Marriage_Status, string.Empty, new { @class = "label label-danger" })*@
                            </div>
                        </div>                        
                       

                        @*RejectStatus == 2 mean it's reject Record*@
                        
                        @if (RejectStatus == 2)
                        {
                            <div class="form-group">
                                @Html.Label("Reject Ref No", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.RejectRefNo, new { @class = "form-control alert-danger", autocomplete = "off", @readonly = "readonly" })
                            </div>
                        }

                        @*NOK Name*@
                        <div class="form-group">
                            <div class="col-lg-12">
                                @Html.Label("NOK Name", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.NOKName, new { @class = "form-control ", autocomplete = "off" })
                            </div>                            
                        </div>

                        @*NOK Change Category *@
                        <div class="form-group">

                            <div class="col-lg-6">
                                @Html.Label("NOK Relationship", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.NOKChangeTo, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                            </div>

                            <div class="col-lg-6">
                                @Html.Label("NOK Change Category", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.RelationshipName, ViewBag.DDL_Relationship as SelectList, "SELECT", htmlAttributes: new { @class = "form-control" })
                                @Html.HiddenFor(model => model.RelationshipName, new { @class = "form-control ", autocomplete = "off" })
                            </div>

                        </div>

                        @*With Effect Date*@
                        <div class="form-group">
                            <div class="col-lg-12">
                                @Html.Label("NOK With Effect Date", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.WFDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date" })
                                @Html.ValidationMessageFor(model => model.WFDate, string.Empty, new { @class = "label label-danger" })
                            </div>                            
                        </div>

                        @*NOK Address*@
                        <div class="form-group">
                            <div class="col-lg-12">
                                @Html.Label("NOK Address", new { @class = "control-label" })
                                @Html.TextAreaFor(model => model.NOKAddress, new { @class = "form-control ", autocomplete = "off", placeholder = "" })
                                @Html.ValidationMessageFor(model => model.NOKAddress, string.Empty, new { @class = "label label-danger" })
                            </div>                           
                        </div>
                                                
                    </div>
                </div>
            </section>

            <section class="col-lg-6 connectedSortable">
                <div class="nav-tabs-custom">
                    <div class="box-body">                      

                        @*District*@
                        <div class="form-group">
                            @*District*@
                            <div class="col-lg-6">
                                @Html.Label("District", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.EditedDistrict1, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                            </div>

                            <div class="col-lg-6">
                                @Html.Label("Select District", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.DistrictID, ViewBag.DDL_DistricSelectAll_Result as SelectList, "SELECT", htmlAttributes: new { @class = "form-control" })
                                @*@Html.DropDownListFor(model => model.GSName, new SelectList(string.Empty, "Value", "Text"), "SELECT", htmlAttributes: new { @class = "form-control" })*@

                            </div>
                        </div>

                        @*GS Division*@
                        <div class="form-group">
                            @*GS Division*@
                            <div class="col-lg-6">
                                @Html.Label("GS Division", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.EditedGSnumber, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                            </div>
                            @*GS Division*@
                            <div class="col-lg-6">
                                @Html.Label("Select GS Division", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.GSName, new SelectList(string.Empty, "Value", "Text"), "SELECT", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.GSName, string.Empty, new { @class = "label label-danger" })
                            </div>
                        </div>

                        @*Nearest Town*@
                        <div class="form-group">
                            <div class="col-lg-6">
                                @Html.Label("Nearest Town", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.NearestTown, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                            </div>

                            <div class="col-lg-6" style="margin-top:12px">
                                @Html.Label("Select Nearest Town", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.Town1, new SelectList(string.Empty, "Value", "Text"), "SELECT", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Town1, string.Empty, new { @class = "label label-danger" })

                            </div>
                        </div>

                        @*Nearest Town and Police Station*@
                        <div class="form-group">
                            @*Police Station*@
                            <div class="col-lg-6">
                                @Html.Label("Police Station", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.EditPoliceStation, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })

                            </div>

                            @*Police Station*@
                            <div class="col-lg-6" style="margin-top:12px">
                                @Html.Label("Select Police Station", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.PoliceStation1, new SelectList(string.Empty, "Value", "Text"), "SELECT", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PoliceStation1, string.Empty, new { @class = "label label-danger" })
                            </div>
                        </div>

                        @*Post Office*@
                        <div class="form-group">
                            <div class="col-lg-6">
                                @Html.Label("Post Office", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.EditPostOfficeName, new { @class = "form-control ", autocomplete = "off", @readonly = "readonly" })
                            </div>
                            <div class="col-lg-6">
                                @Html.Label("Select Post Office", new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.PostOfficeName, new SelectList(string.Empty, "Value", "Text"), "SELECT", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PostOfficeName, string.Empty, new { @class = "label label-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <section class="col-lg-6" style="margin-top:20px">
                                <button type="button" class="col-lg-4 btn btn-warning pull-right" id="btnYes" style="height:40px;width:200px" onclick="location.href='@Url.Action("Index", "NOKChange", new { serviceStatus = 0})'">
                                    <span class="info-box-text"><i class=" fa fa-hand-o-left"></i> Go to Pending List</span>
                                </button>
                            </section>

                            <section class="col-lg-6" style="margin-top:20px">
                                <button type="submit" class="col-lg-4 btn btn-success pull-right" style="height:40px;width:200px">
                                    <span class="info-box-text"><i class=" fa fa-save"></i> Save</span>
                                </button>
                                @*<i class=" fa fa-hand-o-left"><input type="submit" value="Save" class="btn btn-success pull-right submitBtn"></i>*@
                            </section>
                        </div>

                    </div>
                </div>
            </section>
        }       

    </div>

}
<script>
    //Select GS divition  Relevant to the Distric
$(function () {
    //DDL for Select
    $("#DistrictID").change(function () {
        //DDL Automaticaly Bind
        $("#GSName").empty();
        $.ajax({
            type: 'POST',
            dataType: "json",
            url: '@Url.Content("~/NOKChange/FromDistrict")',
            data: { id: $("#DistrictID").val() },
            success: function (FromDistrict) {
                var items = '<option>SELECT</option>';
                $('#GSName').html(items);
                $.each(FromDistrict, function (i, FromDistrict) {
                    $("#GSName").append('<option value="' + FromDistrict.Value + '">' +
                       FromDistrict.Text + '</option>');
                    //$("#District").val(data.DESCRIPTION);
                });
            },
            error: function (ex) {
                alert('Failed to retrieve Make.' + ex);
            }
        });
        return false;
    })
});
//Select Police Station  Relevant to the Distric
$(function () {
    //DDL for Select
    $("#DistrictID").change(function () {
        //DDL Automaticaly Bind
        $("#PoliceStation1").empty();
        $.ajax({
            type: 'POST',
            dataType: "json",
            url: '@Url.Content("~/NOKChange/FromPoliceStation")',
            data: { id: $("#DistrictID").val() },
            success: function (FromPoliceStation) {
                var items = '<option>SELECT</option>';
                $('#PoliceStation1').html(items);
                $.each(FromPoliceStation, function (i, FromPoliceStation) {
                    $("#PoliceStation1").append('<option value="' + FromPoliceStation.Value + '">' +
                       FromPoliceStation.Text + '</option>');
                });
            },
            error: function (ex) {
                alert('Failed to retrieve Make.' + ex);
            }
        });
        return false;
    })
});

//Select Town Relevant to the Distric
$(function () {
    //DDL for Select
    $("#DistrictID").change(function () {
        //DDL Automaticaly Bind

        $("#Town1").empty();
        $.ajax({
            type: 'POST',
            dataType: "json",
            url: '@Url.Content("~/NOKChange/FromTown")',

            data: { id: $("#DistrictID").val() },
            success: function (FromTown) {
                var items = '<option>SELECT</option>';
                $('#Town1').html(items);
                $.each(FromTown, function (i, FromTown) {
                    $("#Town1").append('<option value="' + FromTown.Value + '">' +
                       FromTown.Text + '</option>');
                });
            },
            error: function (ex) {
                alert('Failed to retrieve Make.' + ex);
            }
        });
        return false;
    })
});
//Select Post Office Relevant to the Distric
$(function () {
    //DDL for Select
    $("#DistrictID").change(function () {
        //DDL Automaticaly Bind

        $("#PostOfficeName").empty();
        $.ajax({
            type: 'POST',
            dataType: "json",
            url: '@Url.Content("~/NOKChange/FromPostOffice")',
            data: { id: $("#DistrictID").val() },
            success: function (FromTown) {
                var items = '<option>SELECT</option>';
                $('#PostOfficeName').html(items);
                $.each(FromTown, function (i, FromTown) {
                    $("#PostOfficeName").append('<option value="' + FromTown.Value + '">' +
                       FromTown.Text + '</option>');
                });
            },
            error: function (ex) {
                alert('Failed to retrieve Make.' + ex);
            }
        });
        return false;
    })
});

</script>